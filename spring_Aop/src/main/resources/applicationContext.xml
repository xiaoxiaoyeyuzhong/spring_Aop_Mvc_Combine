<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 业务bean -->
    <bean id="serviceA" class="com.fengdetian.aop.ServiceA" ></bean>

    <!-- 业务bean -->
    <bean id="serviceC" class="com.fengdetian.aop.ServiceC" >
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!-- 通知bean -->
    <bean id="AopInterceptor" class="com.fengdetian.aop.AopInterceptor"></bean>

    <!-- aop配置 -->
    <aop:config>
        <!-- 切入点声明，expression为表达式，id可在其他地方引用 -->
        <aop:pointcut expression="execution(* com.fengdetian.aop.Service*.*(..)) "
                      id="allMethodInService" />
        <!-- 连接切入点和通知（事务通知） -->
<!--          <aop:advisor advice-ref="txAdvice" pointcut-ref="allMethodInService" />  -->
        <!-- 切面声明，ref指向通知bean -->
        <aop:aspect ref="AopInterceptor">
            <!-- 前置通知声明， method为通知bean的方法名，pointcut-ref将切入点和通知关联起来 -->
            <aop:before method="somethingBefore" pointcut-ref="allMethodInService" />
            <!-- 后置通知声明 -->
            <aop:after-returning method="somethingAfterReturn"
                                 pointcut-ref="allMethodInService"/>
            <!-- 环绕通知声明 -->
            <aop:around method="somethingAround" pointcut-ref="allMethodInService" />
        </aop:aspect>
    </aop:config>

    <!-- “事务通知”用专有标签声明，依赖事务管理器 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!-- 用于配置事务属性 -->
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="del*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="*" /> <!-- 与事务属性关联的方法名。 -->
        </tx:attributes>
    </tx:advice>


    <!-- 事务管理器由Spring实现，不同持久层有不同事务管理器 -->
    <!-- JDBC事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 依赖DataSource -->
        <property name="dataSource" ref="dataSource"></property>
        <property name="rollbackOnCommitFailure" value="true"></property>
    </bean>

    <!--配置数据源-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!-- 配置DataSource  -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
    <property name="driverClass" value="${jdbc.driver}"/>
    <property name="jdbcUrl" value="${jdbc.url}"/>
    <property name="user" value="${jdbc.username}"/>
    <property name="password" value="${jdbc.password}"/>
    </bean>

</beans>